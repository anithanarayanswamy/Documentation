{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs Overview The Todo App is a simple Flask-based application that allows users to manage a todo list. It includes the ability to add new items, toggle their completion status, and delete them from the list. The application serves a simple web interface that interacts with a backend data structure to store and modify todos. Below is the breakdown of the app's structure and key functionality. Project layout My-documentation/ \u251c\u2500\u2500 todo-app/ \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 templates/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 models/ \u2502 \u2502 \u2514\u2500\u2500 todo.json \u2502 \u251c\u2500\u2500 tests/ \u2502 \u2502 \u2514\u2500\u2500 test.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 docs/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 test.md \u251c\u2500\u2500 todo-app.md Bringing the Todo App Up To run the Flask application, use the following steps: Start the Flask application (in one terminal): bash python app.py Verify the model (in another terminal): bash altwalker check models/todo.json tests/test.py Run the tests : bash altwalker online -m models/todo.json \"random(vertex_coverage(100))\" tests/test.py Notes The application runs on http://localhost:5000 . Tests use Selenium WebDriver with Chrome . Ensure that Chrome browser is installed on your machine. The model includes cleanup steps to properly close browser sessions. Test Execution Process : 1. Verify the model: bash altwalker check models/todo.json tests/test.py 2. Then, run the tests: bash altwalker online -m models/todo.json \"random(vertex_coverage(100))\" tests/test.py Additional Documentation Files todo-app.md : Detailed description of the Flask Todo App implementation. test.md : Explanation of the Todo App test model and how it's structured.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"","title":"Welcome to MkDocs"},{"location":"#overview","text":"The Todo App is a simple Flask-based application that allows users to manage a todo list. It includes the ability to add new items, toggle their completion status, and delete them from the list. The application serves a simple web interface that interacts with a backend data structure to store and modify todos. Below is the breakdown of the app's structure and key functionality.","title":"Overview"},{"location":"#project-layout","text":"My-documentation/ \u251c\u2500\u2500 todo-app/ \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 templates/ \u2502 \u2502 \u2514\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 models/ \u2502 \u2502 \u2514\u2500\u2500 todo.json \u2502 \u251c\u2500\u2500 tests/ \u2502 \u2502 \u2514\u2500\u2500 test.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 docs/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 test.md \u251c\u2500\u2500 todo-app.md","title":"Project layout"},{"location":"#bringing-the-todo-app-up","text":"To run the Flask application, use the following steps: Start the Flask application (in one terminal): bash python app.py Verify the model (in another terminal): bash altwalker check models/todo.json tests/test.py Run the tests : bash altwalker online -m models/todo.json \"random(vertex_coverage(100))\" tests/test.py","title":"Bringing the Todo App Up"},{"location":"#notes","text":"The application runs on http://localhost:5000 . Tests use Selenium WebDriver with Chrome . Ensure that Chrome browser is installed on your machine. The model includes cleanup steps to properly close browser sessions. Test Execution Process : 1. Verify the model: bash altwalker check models/todo.json tests/test.py 2. Then, run the tests: bash altwalker online -m models/todo.json \"random(vertex_coverage(100))\" tests/test.py","title":"Notes"},{"location":"#additional-documentation-files","text":"todo-app.md : Detailed description of the Flask Todo App implementation. test.md : Explanation of the Todo App test model and how it's structured.","title":"Additional Documentation Files"},{"location":"test/","text":"TODO App Test Model States The test model consists of the following three states: start : Initial state with browser setup. empty : Todo list is empty. list : Todo list has items. Model Edges (Actions) initialize : Start the application. add_todo : Add a new todo item. toggle_todo : Mark/unmark todo as completed. delete_todo : Remove a todo item. cleanup : Clean up resources. The test generator creates test sequences based on this model, ensuring thorough coverage of the todo application's functionality. Todo Model Source code in todo-app/tests/test.py class TodoModel: \"\"\" Todo Model \"\"\" def __init__(self): self.driver = None def start_application(self): \"\"\"v_start vertex\"\"\" chrome_options = webdriver.ChromeOptions() self.driver = webdriver.Chrome(options=chrome_options) self.driver.get(\"http://localhost:5000\") print(\"Application started\") def verify_empty_state(self): \"\"\"v_empty vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) == 0 print(\"Verified empty state\") def verify_list_state(self): \"\"\"v_list vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) > 0 print(\"Verified list state\") def initialize(self): \"\"\"Edge from start to empty\"\"\" print(\"Initializing application\") pass def add_todo(self): \"\"\"Edge for adding todos\"\"\" input_field = self.driver.find_element(By.NAME, \"todo\") input_field.send_keys(f\"Test Todo {time.time()}\") input_field.send_keys(Keys.RETURN) time.sleep(1) print(\"Added todo item\") def toggle_todo(self): \"\"\"Edge for toggling todo state\"\"\" todo_link = self.driver.find_element(By.CLASS_NAME, \"todo-item\").find_element(By.TAG_NAME, \"a\") todo_link.click() time.sleep(1) print(\"Toggled todo item\") def delete_todo(self): \"\"\"Edge for deleting todo\"\"\" delete_button = self.driver.find_element(By.CLASS_NAME, \"delete-btn\") delete_button.click() time.sleep(1) print(\"Deleted todo item\") def cleanup(self): \"\"\"Cleanup after tests\"\"\" if self.driver: self.driver.quit() print(\"Cleaned up resources\") add_todo() Edge for adding todos Source code in todo-app/tests/test.py def add_todo(self): \"\"\"Edge for adding todos\"\"\" input_field = self.driver.find_element(By.NAME, \"todo\") input_field.send_keys(f\"Test Todo {time.time()}\") input_field.send_keys(Keys.RETURN) time.sleep(1) print(\"Added todo item\") cleanup() Cleanup after tests Source code in todo-app/tests/test.py def cleanup(self): \"\"\"Cleanup after tests\"\"\" if self.driver: self.driver.quit() print(\"Cleaned up resources\") delete_todo() Edge for deleting todo Source code in todo-app/tests/test.py def delete_todo(self): \"\"\"Edge for deleting todo\"\"\" delete_button = self.driver.find_element(By.CLASS_NAME, \"delete-btn\") delete_button.click() time.sleep(1) print(\"Deleted todo item\") initialize() Edge from start to empty Source code in todo-app/tests/test.py def initialize(self): \"\"\"Edge from start to empty\"\"\" print(\"Initializing application\") pass start_application() v_start vertex Source code in todo-app/tests/test.py def start_application(self): \"\"\"v_start vertex\"\"\" chrome_options = webdriver.ChromeOptions() self.driver = webdriver.Chrome(options=chrome_options) self.driver.get(\"http://localhost:5000\") print(\"Application started\") toggle_todo() Edge for toggling todo state Source code in todo-app/tests/test.py def toggle_todo(self): \"\"\"Edge for toggling todo state\"\"\" todo_link = self.driver.find_element(By.CLASS_NAME, \"todo-item\").find_element(By.TAG_NAME, \"a\") todo_link.click() time.sleep(1) print(\"Toggled todo item\") verify_empty_state() v_empty vertex Source code in todo-app/tests/test.py def verify_empty_state(self): \"\"\"v_empty vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) == 0 print(\"Verified empty state\") verify_list_state() v_list vertex Source code in todo-app/tests/test.py def verify_list_state(self): \"\"\"v_list vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) > 0 print(\"Verified list state\")","title":"TEST"},{"location":"test/#todo-app-test","text":"","title":"TODO App Test"},{"location":"test/#model-states","text":"The test model consists of the following three states: start : Initial state with browser setup. empty : Todo list is empty. list : Todo list has items.","title":"Model States"},{"location":"test/#model-edges-actions","text":"initialize : Start the application. add_todo : Add a new todo item. toggle_todo : Mark/unmark todo as completed. delete_todo : Remove a todo item. cleanup : Clean up resources. The test generator creates test sequences based on this model, ensuring thorough coverage of the todo application's functionality. Todo Model Source code in todo-app/tests/test.py class TodoModel: \"\"\" Todo Model \"\"\" def __init__(self): self.driver = None def start_application(self): \"\"\"v_start vertex\"\"\" chrome_options = webdriver.ChromeOptions() self.driver = webdriver.Chrome(options=chrome_options) self.driver.get(\"http://localhost:5000\") print(\"Application started\") def verify_empty_state(self): \"\"\"v_empty vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) == 0 print(\"Verified empty state\") def verify_list_state(self): \"\"\"v_list vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) > 0 print(\"Verified list state\") def initialize(self): \"\"\"Edge from start to empty\"\"\" print(\"Initializing application\") pass def add_todo(self): \"\"\"Edge for adding todos\"\"\" input_field = self.driver.find_element(By.NAME, \"todo\") input_field.send_keys(f\"Test Todo {time.time()}\") input_field.send_keys(Keys.RETURN) time.sleep(1) print(\"Added todo item\") def toggle_todo(self): \"\"\"Edge for toggling todo state\"\"\" todo_link = self.driver.find_element(By.CLASS_NAME, \"todo-item\").find_element(By.TAG_NAME, \"a\") todo_link.click() time.sleep(1) print(\"Toggled todo item\") def delete_todo(self): \"\"\"Edge for deleting todo\"\"\" delete_button = self.driver.find_element(By.CLASS_NAME, \"delete-btn\") delete_button.click() time.sleep(1) print(\"Deleted todo item\") def cleanup(self): \"\"\"Cleanup after tests\"\"\" if self.driver: self.driver.quit() print(\"Cleaned up resources\")","title":"Model Edges (Actions)"},{"location":"test/#todo-app.tests.test.TodoModel.add_todo","text":"Edge for adding todos Source code in todo-app/tests/test.py def add_todo(self): \"\"\"Edge for adding todos\"\"\" input_field = self.driver.find_element(By.NAME, \"todo\") input_field.send_keys(f\"Test Todo {time.time()}\") input_field.send_keys(Keys.RETURN) time.sleep(1) print(\"Added todo item\")","title":"add_todo"},{"location":"test/#todo-app.tests.test.TodoModel.cleanup","text":"Cleanup after tests Source code in todo-app/tests/test.py def cleanup(self): \"\"\"Cleanup after tests\"\"\" if self.driver: self.driver.quit() print(\"Cleaned up resources\")","title":"cleanup"},{"location":"test/#todo-app.tests.test.TodoModel.delete_todo","text":"Edge for deleting todo Source code in todo-app/tests/test.py def delete_todo(self): \"\"\"Edge for deleting todo\"\"\" delete_button = self.driver.find_element(By.CLASS_NAME, \"delete-btn\") delete_button.click() time.sleep(1) print(\"Deleted todo item\")","title":"delete_todo"},{"location":"test/#todo-app.tests.test.TodoModel.initialize","text":"Edge from start to empty Source code in todo-app/tests/test.py def initialize(self): \"\"\"Edge from start to empty\"\"\" print(\"Initializing application\") pass","title":"initialize"},{"location":"test/#todo-app.tests.test.TodoModel.start_application","text":"v_start vertex Source code in todo-app/tests/test.py def start_application(self): \"\"\"v_start vertex\"\"\" chrome_options = webdriver.ChromeOptions() self.driver = webdriver.Chrome(options=chrome_options) self.driver.get(\"http://localhost:5000\") print(\"Application started\")","title":"start_application"},{"location":"test/#todo-app.tests.test.TodoModel.toggle_todo","text":"Edge for toggling todo state Source code in todo-app/tests/test.py def toggle_todo(self): \"\"\"Edge for toggling todo state\"\"\" todo_link = self.driver.find_element(By.CLASS_NAME, \"todo-item\").find_element(By.TAG_NAME, \"a\") todo_link.click() time.sleep(1) print(\"Toggled todo item\")","title":"toggle_todo"},{"location":"test/#todo-app.tests.test.TodoModel.verify_empty_state","text":"v_empty vertex Source code in todo-app/tests/test.py def verify_empty_state(self): \"\"\"v_empty vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) == 0 print(\"Verified empty state\")","title":"verify_empty_state"},{"location":"test/#todo-app.tests.test.TodoModel.verify_list_state","text":"v_list vertex Source code in todo-app/tests/test.py def verify_list_state(self): \"\"\"v_list vertex\"\"\" todo_items = self.driver.find_elements(By.CLASS_NAME, \"todo-item\") assert len(todo_items) > 0 print(\"Verified list state\")","title":"verify_list_state"},{"location":"todo-app/","text":"Todo App Implementation Application Structure The app.py file contains the core logic of the Todo app, defining routes for displaying the todo list and handling user interactions like adding, toggling, and deleting todo items. add_todo() Method to add a new todo item Source code in todo-app/app.py @app.route('/add', methods=['POST']) def add_todo(): \"\"\" Method to add a new todo item \"\"\" todo = request.form.get('todo') if todo: todos.append({'id': len(todos), 'text': todo, 'completed': False}) return redirect(url_for('index')) delete_todo(todo_id) Method to delete a todo item Source code in todo-app/app.py @app.route('/delete/<int:todo_id>') def delete_todo(todo_id): \"\"\" Method to delete a todo item \"\"\" global todos todos = [todo for todo in todos if todo['id'] != todo_id] return redirect(url_for('index')) index() Method to render the index page Source code in todo-app/app.py @app.route('/') def index(): \"\"\" Method to render the index page \"\"\" return render_template('index.html', todos=todos) toggle_todo(todo_id) Method to toggle the completion status of a todo item Source code in todo-app/app.py @app.route('/toggle/<int:todo_id>') def toggle_todo(todo_id): \"\"\" Method to toggle the completion status of a todo item \"\"\" for todo in todos: if todo['id'] == todo_id: todo['completed'] = not todo['completed'] break return redirect(url_for('index'))","title":"TODO APP"},{"location":"todo-app/#todo-app-implementation","text":"","title":"Todo App Implementation"},{"location":"todo-app/#application-structure","text":"The app.py file contains the core logic of the Todo app, defining routes for displaying the todo list and handling user interactions like adding, toggling, and deleting todo items.","title":"Application Structure"},{"location":"todo-app/#todo-app.app.add_todo","text":"Method to add a new todo item Source code in todo-app/app.py @app.route('/add', methods=['POST']) def add_todo(): \"\"\" Method to add a new todo item \"\"\" todo = request.form.get('todo') if todo: todos.append({'id': len(todos), 'text': todo, 'completed': False}) return redirect(url_for('index'))","title":"add_todo"},{"location":"todo-app/#todo-app.app.delete_todo","text":"Method to delete a todo item Source code in todo-app/app.py @app.route('/delete/<int:todo_id>') def delete_todo(todo_id): \"\"\" Method to delete a todo item \"\"\" global todos todos = [todo for todo in todos if todo['id'] != todo_id] return redirect(url_for('index'))","title":"delete_todo"},{"location":"todo-app/#todo-app.app.index","text":"Method to render the index page Source code in todo-app/app.py @app.route('/') def index(): \"\"\" Method to render the index page \"\"\" return render_template('index.html', todos=todos)","title":"index"},{"location":"todo-app/#todo-app.app.toggle_todo","text":"Method to toggle the completion status of a todo item Source code in todo-app/app.py @app.route('/toggle/<int:todo_id>') def toggle_todo(todo_id): \"\"\" Method to toggle the completion status of a todo item \"\"\" for todo in todos: if todo['id'] == todo_id: todo['completed'] = not todo['completed'] break return redirect(url_for('index'))","title":"toggle_todo"}]}